{"version":3,"sources":["main.js","list/listCreateEditCtrl.js","home/home.controller.js","common/directives/buttonLink.directive.js","common/directives/onReadFile.directive.js","common/services/calculation.service.js","common/services/data.service.js","common/services/pagination.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.min.js","sourcesContent":["(function () {\r\n\r\n    angular.module('pointApp', ['ngRoute', 'ui.bootstrap', 'ngResource', 'ngFileSaver', 'ngMaterial']);\r\n\r\n    function config($routeProvider) {\r\n        $routeProvider\r\n            .when('/', {\r\n                templateUrl: '/home/home.view.html',\r\n                controller: 'homeCtrl'\r\n            })\r\n            .when('/edit/:id', {\r\n                templateUrl: '/list/create_edit.view.html',\r\n                controller: 'listCreateEditCtrl',\r\n                resolve: {\r\n                    points: function (dataService, $route) {\r\n                        return dataService.get({ list_id: $route.current.params.id });\r\n                    }\r\n                }     \r\n\r\n            })\r\n            .when('/create', {\r\n                controller: 'listCreateEditCtrl',\r\n                templateUrl: '/list/create_edit.view.html',\r\n                resolve: {\r\n                    points: function () {\r\n                        return {name: '', xy: []};\r\n                    }\r\n                }\r\n\r\n            })\r\n            .otherwise({ redirectTo: '/' });\r\n\r\n        //$locationProvider.html5Mode(true);\r\n    }\r\n\r\n\r\n    angular.module('pointApp')\r\n        .config(['$routeProvider', '$locationProvider', config]);\r\n\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('pointApp')\r\n        .controller('listCreateEditCtrl', function ($scope, dataService, calcService, FileSaver, pagination, $mdDialog, points) {\r\n            var original = {};\r\n            $scope.point = {};\r\n            $scope.errors = [];\r\n            $scope.paginator = pagination;\r\n            $scope.pageSizes = [5, 10, 20, 50];\r\n            $scope.selectedTabIndex = 0;\r\n\r\n            if (points.$promise != undefined) {\r\n                points.$promise.then(function (result) {\r\n                    $scope.points = result;\r\n                    original = angular.copy($scope.points.xy);\r\n                    $scope.paginator.initPagination($scope.points.xy);\r\n                });\r\n\r\n            } else {\r\n                $scope.points = points;\r\n                original = angular.copy($scope.points.xy);\r\n                $scope.paginator.initPagination($scope.points.xy);\r\n\r\n            }\r\n\r\n\r\n            $scope.showPrompt = function (ev) {\r\n                if ($scope.points.xy.length > 0) {\r\n                    var confirm = $mdDialog.prompt()\r\n                        .title('Save a list')\r\n                        .textContent('List with same name will be overrided')\r\n                        .placeholder('Please enter a name')\r\n                        .ariaLabel('Please enter a name')\r\n                        .initialValue($scope.points.name)\r\n                        .targetEvent(ev)\r\n                        .ok('Save')\r\n                        .cancel('Cancel');\r\n                    $scope.status = \"\";\r\n                    $mdDialog.show(confirm).then(\r\n                        function (result) {\r\n                            createDialogAction(result);\r\n                        }, function () {\r\n                             \r\n                        });\r\n\r\n                } else\r\n                    $scope.errors.push({ message: \"Add some points: \", value: \"5000 >= x, y >= -5000\" });\r\n            }\r\n             \r\n\r\n            var createDialogAction = function (name) {\r\n                var entry = new dataService();\r\n                entry.name = name;\r\n                entry.xy = $scope.points.xy;\r\n                entry.$save(function (res) {\r\n                    original = angular.copy($scope.points.xy);\r\n                    $scope.status = res.message;\r\n                }, function (err) {\r\n                    $scope.status = \"Error\";\r\n                });\r\n            }\r\n\r\n\r\n            $scope.displayFileContents = function (contents) {\r\n                $scope.selectedTabIndex = 0;\r\n                $scope.clearError();\r\n                $scope.points.xy = $scope.points.xy.concat(contents);\r\n                $scope.points.xy = calcService.removeDuplicates($scope.points.xy);\r\n                $scope.errors.push(...calcService.errorMsg);\r\n                $scope.paginator.initPagination($scope.points.xy);\r\n            };\r\n\r\n\r\n            var resetForm = function () {\r\n                $scope.point = {};\r\n                $scope.createForm.$setUntouched();\r\n                $scope.createForm.$setPristine();\r\n            }\r\n\r\n            $scope.add = function () {\r\n                $scope.selectedTabIndex = 0;\r\n                if ($scope.createForm.$valid) {\r\n                    if (calcService.checkValue({ 0: $scope.point.x, 1: $scope.point.y })) {\r\n                        var index = $scope.points.xy.findIndex(x => x.x === $scope.point.x && x.y === $scope.point.y);\r\n                        if (index === -1) {\r\n                            $scope.points.xy.push($scope.point);\r\n                            resetForm();\r\n                            $scope.paginator.initPagination($scope.points.xy);\r\n                        }\r\n                        else $scope.errors.push({ message: \"Duplicate found: \", value: $scope.point.x + \" \" + $scope.point.y });\r\n\r\n                    }\r\n                    else if ($scope.points.xy.length === 10000) {\r\n                        $scope.errors.push({ message: \"List is full: \", value: $scope.points.xy.length });\r\n                    } else\r\n                        $scope.errors.push({ message: \"Value is incorrect: \", value: $scope.point.x + \" \" + $scope.point.y });\r\n                }\r\n            }\r\n\r\n\r\n            $scope.download = function () {\r\n                var dataFile = calcService.dataForDownload($scope.points);\r\n                var data = new Blob([dataFile], { type: 'text/plain' });\r\n                FileSaver.saveAs(data, $scope.points.name + '.txt');\r\n            };\r\n\r\n            $scope.remove = function (point) {\r\n                var index = $scope.points.xy.indexOf(point);\r\n                if (index != -1) {\r\n                    $scope.points.xy.splice(index, 1);\r\n                    $scope.paginator.initPagination($scope.points.xy);\r\n                }\r\n\r\n            };\r\n\r\n            $scope.clearError = function () {\r\n                $scope.errors = [];\r\n                calcService.errorMsg = [];\r\n            }\r\n\r\n            $scope.clear = function () {\r\n                angular.copy(original, $scope.points.xy);\r\n                if ($scope.selectedTabIndex === 0)\r\n                    $scope.paginator.initPagination($scope.points.xy);\r\n            }\r\n              \r\n\r\n            $scope.$watch(\"squares\", function () {\r\n                if ($scope.squares) {\r\n                    if ($scope.squares.length > 0) {\r\n                        $scope.paginator.initPagination($scope.squares);\r\n                        $scope.selectedTabIndex = 1;\r\n                    }\r\n                }\r\n            }\r\n            );\r\n\r\n\r\n\r\n            $scope.onTabChanges = function (currentTabIndex) {\r\n                $scope.selectedTabIndex = currentTabIndex;\r\n                if ($scope.selectedTabIndex === 0 && $scope.points) {\r\n                    $scope.paginator.initPagination($scope.points.xy);\r\n                } else if ($scope.squares)\r\n                    $scope.paginator.initPagination($scope.squares);\r\n\r\n            };\r\n\r\n\r\n            $scope.formSquare = function () {\r\n                 \r\n                $scope.squares = calcService.findSquares($scope.points.xy);\r\n                if ($scope.squares.length === 0) {\r\n                    $scope.errors.push({ message: \"Current list don't have any square\", value: \"\" });\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('pointApp')\r\n        .controller('homeCtrl', function ($scope, dataService, $location) {\r\n\r\n            $scope.editList = function (listId) {\r\n                $location.path('/edit/' + listId);\r\n            }\r\n\r\n            $scope.createList = function () {\r\n                $location.path('/create/');\r\n            }\r\n\r\n            function getItems() {\r\n                $scope.lists = dataService.query(function () {\r\n                    console.log($scope.lists);\r\n                }, function (err) {\r\n\r\n                });\r\n            }\r\n\r\n            $scope.deleteList = function (listId) {\r\n                //var entry = dataService.delete({ list_id: listId }, function () {\r\n                //    entry.$delete({ list_id: entry._id }, function (result) {\r\n                //        getItems();\r\n                //    });\r\n                //});\r\n\r\n                dataService.delete({ list_id: listId }, function () {\r\n                    getItems();\r\n                });\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n            getItems();\r\n        });\r\n\r\n\r\n\r\n})();","(function () {\r\n    angular.module('pointApp')\n        .directive('linkClick', function ($location) {\n            return function (scope, element, attrs) {\n                var path;\n\n                attrs.$observe('linkClick', function (val) {\n                    path = val;\n                });\n\n                element.bind('click', function () {\n                    scope.$apply(function () {\n                        $location.path(path);\n                    });\n                });\n            };\n        });\n\r\n})();\n","(function () {\r\n\r\n\r\n    angular\r\n        .module('pointApp')\r\n        .directive('onReadFile', function ($parse, calcService) {\r\n            return {\r\n                restrict: 'A',\r\n                scope: false,\r\n                link: function (scope, element, attrs) {\r\n                    element.bind('change', function (e) {\r\n                        var onFileReadFn = $parse(attrs.onReadFile);\r\n                        var reader = new FileReader();\r\n                        reader.onload = function () {\r\n                            var fileContents = reader.result;\r\n                            fileContents = calcService.toArrayOfObject(fileContents);\r\n                            scope.$apply(function () {\r\n                                onFileReadFn(scope, {\r\n                                    'contents': fileContents\r\n                                   \r\n                                });\r\n\r\n                            });\r\n\r\n                        }\r\n                        if (element[0].files[0])\r\n                            reader.readAsText(element[0].files[0]);\r\n                    });\r\n\r\n                }\r\n            }\r\n\r\n        })\r\n\r\n\r\n\r\n\r\n})();","(function () {\r\n    angular.module('pointApp')\r\n        .service('calcService', \r\n        function () {\r\n\r\n            var calService = {\r\n                errorMsg: []\r\n            }\r\n\r\n            var compare = function (a, b) {\r\n\r\n                if (a.x !== b.x) return false;\r\n                if (a.y !== b.y) return false;\r\n                return true;\r\n            }\r\n\r\n\r\n           var checkForNegativeExtremes = function (slope) {\r\n                if (!isFinite(slope) || slope === -0.0) {\r\n                    slope = Math.abs(slope);\r\n                }\r\n                return slope;\r\n            }\r\n\r\n            Array.prototype.contains = function (obj) {\r\n                var i = this.length;\r\n                while (i--) {\r\n                    if (\r\n                        (this[i].a.x === obj.a.x && this[i].a.y === obj.a.y &&\r\n                            this[i].b.x === obj.b.x && this[i].b.y === obj.b.y) ||\r\n                        (this[i].a.x === obj.b.x && this[i].a.y === obj.b.y &&\r\n                            this[i].b.x === obj.a.x && this[i].b.y === obj.a.y)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n\r\n\r\n            calService.findSquares = function (data) {\r\n\r\n                var all = data;\r\n                var m = new Map();\r\n                var squares = [];\r\n\r\n                for (var d = 0; d < all.length - 1; d++) {\r\n                    var a = all[d];\r\n                    for (var j = d + 1; j < all.length; j++) {\r\n                        var b = all[j];\r\n                        if (compare(a, b)) continue;\r\n                        var sl = checkForNegativeExtremes((a.y - b.y) / (a.x - b.x));\r\n                        var set = m.get(sl);\r\n                        if (set === null || set === undefined) {\r\n                            m.set(sl, set = new Set());\r\n                        }\r\n                        set.add({\r\n                            a,\r\n                            b\r\n                        });\r\n\r\n                    }\r\n                }\r\n\r\n                var keys = Array.from(m.keys());\r\n                //keys.sort();\r\n                for (var k = 0; k < keys.length; k++) {\r\n\r\n                    var slope = keys[k];\r\n\r\n                    var lTmp = m.get(slope);\r\n                    if (lTmp === undefined || lTmp.size <= 1) continue;\r\n                    var slopePerpendicular = checkForNegativeExtremes(-1. / slope);\r\n\r\n                    var perpendiculars = m.get(slopePerpendicular);\r\n                    m.delete(slopePerpendicular);\r\n                    if (perpendiculars == undefined || perpendiculars.size <= 1) continue;\r\n                    var per = Array.from(perpendiculars);\r\n                    var l = Array.from(lTmp);\r\n                    for (var i = 0; i < l.length - 1; i++) {\r\n                        var l1 = l[i];\r\n                        for (var j = i + 1; j < l.length; j++) {\r\n                            var l2 = l[j];\r\n                            if (per.contains({\r\n                                a: l1.a,\r\n                                b: l2.a\r\n                            }) && per.contains({\r\n                                a: l1.b,\r\n                                b: l2.b\r\n                            }) ||\r\n                                per.contains({\r\n                                    a: l1.a,\r\n                                    b: l2.b\r\n                                }) && per.contains({\r\n                                    a: l1.b,\r\n                                    b: l2.a\r\n                                })) {\r\n                                squares.push({\r\n                                    A: l1.a,\r\n                                    B: l1.b,\r\n                                    C: l2.a,\r\n                                    D: l2.b\r\n                                });\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                return squares;\r\n            }\r\n\r\n\r\n            calService.dataForDownload = function (dataArray) {\r\n                var data = [];\r\n                var temp = \"\";\r\n                for (var i in dataArray.xy) {\r\n                    for (var key in dataArray.xy[i]) {\r\n                        if (key.length === 1) {\r\n                            if (!temp) {\r\n                                temp = dataArray.xy[i][key].toString() + \" \";\r\n                            } else\r\n                                temp = temp.concat(dataArray.xy[i][key].toString() + \"\\n\");\r\n\r\n                        }\r\n                    }\r\n                    data.push(temp);\r\n                    temp = \"\";\r\n                }\r\n                return data.toString().replace(/\\,/g, \"\");\r\n            }\r\n\r\n\r\n            calService.removeDuplicates = function (originalArray) {\r\n                var trimmedArray = [];\r\n                var values = [];\r\n                var valueX, valueY;\r\n\r\n                for (var i = 0; i < originalArray.length; i++) {\r\n                    valueX = originalArray[i]['x'];\r\n                    valueY = originalArray[i]['y'];\r\n\r\n                    var index = values.findIndex(x => x.x === valueX && x.y === valueY);\r\n\r\n                    if (index === -1) {\r\n                        trimmedArray.push(originalArray[i]);\r\n                        values.push({\r\n                            \"x\": valueX,\r\n                            \"y\": valueY\r\n                        });\r\n                    } else calService.errorMsg.push({\r\n                        message: \"Duplicate found: \",\r\n                        value: valueX + \" \" + valueY\r\n                    });\r\n                }\r\n\r\n                return trimmedArray;\r\n\r\n            }\r\n\r\n\r\n            isInt = function (val) {\r\n                var intRegex = /^-?\\d+$/;\r\n                if (!intRegex.test(val))\r\n                    return false;\r\n\r\n                var intVal = parseInt(val, 10);\r\n                return parseFloat(val) == intVal && !isNaN(intVal);\r\n            }\r\n\r\n            calService.checkValue = function (xy) {\r\n                if (isInt(xy[0]) && isInt(xy[1])) {\r\n                    if (parseInt(xy[0], 10) >= -5000 && parseInt(xy[1], 10) >= -5000 && parseInt(xy[0], 10) <= 5000 && parseInt(xy[1], 10) <= 5000)\r\n                        return true;\r\n                    calService.errorMsg.push({\r\n                        message: \"Value is incorrect: \",\r\n                        value: xy[0] + \" \" + xy[1]\r\n                    });\r\n                } else if (xy[0].length && xy[1].length)\r\n                    calService.errorMsg.push({\r\n                        message: \"Value is incorrect: \",\r\n                        value: xy[0] + \" \" + xy[1]\r\n                    });\r\n                return false;\r\n            }\r\n\r\n\r\n            calService.toArrayOfObject = function (contents) {\r\n                var splitedArray = [];\r\n                contents.split(/\\r\\n|\\r|\\n/).map(function (i) {\r\n                    var xy = i.split(\" \");\r\n                    if (calService.checkValue(xy))\r\n                        if (splitedArray.length <= 10000) {\r\n                            splitedArray.push({\r\n                                \"x\": parseInt(xy[0], 10),\r\n                                \"y\": parseInt(xy[1], 10)\r\n                            });\r\n                        } else\r\n                            calService.errorMsg.push({\r\n                                message: \"List is full: \",\r\n                                value: splitedArray.length\r\n                            });\r\n\r\n                    return;\r\n                });\r\n                return splitedArray;\r\n            }\r\n\r\n          \r\n\r\n            return calService;\r\n\r\n        });\r\n\r\n})();","(function () {\r\n    angular.module('pointApp')\r\n        .service('dataService', ['$resource',\r\n            function ($resource, $route) {\r\n                return $resource('/api/list/:list_id', { list_id: '@list_id' }, {\r\n                    update: { method: 'PUT', params: { list_id: '@name' } }\r\n                });\r\n            }]);\r\n\r\n})();","(function () {\r\n    var paginationModule = angular.module('pointApp');\r\n\r\n    paginationModule.factory('pagination', function () {\r\n\r\n\r\n        var paginator = {\r\n            currentPage: 0,\r\n            itemsPerPage: 5,\r\n            pagedItems: [],\r\n            filteredItems: [],\r\n            reverse: false,\r\n            sortingOrder: 'x'\r\n        }; \r\n          \r\n          \r\n        paginator.initPagination = function (data) {\r\n            if (data != undefined ) {\r\n                paginator.filteredItems = data;\r\n                paginator.groupToPages();\r\n            }\r\n        };\r\n\r\n\r\n        //// change sorting order\r\n        paginator.sort_by = function (newSortingOrder) {\r\n            if (paginator.sortingOrder == newSortingOrder)\r\n                paginator.reverse = !paginator.reverse;\r\n\r\n            paginator.sortingOrder = newSortingOrder;\r\n        };\r\n\r\n\r\n        paginator.prevPage = function () {\r\n            if (paginator.currentPage > 0) {\r\n                paginator.currentPage--;\r\n            }\r\n        };\r\n\r\n        paginator.nextPage = function () {\r\n            if (paginator.currentPage < paginator.pagedItems.length - 1) {\r\n                paginator.currentPage++;\r\n            }\r\n        };\r\n        paginator.setPage = function (n) {\r\n            paginator.currentPage = n;\r\n        };\r\n\r\n        paginator.groupToPages = function () {\r\n            paginator.pagedItems = [];\r\n\r\n            for (var i = 0; i < paginator.filteredItems.length; i++) {\r\n                if (i % paginator.itemsPerPage === 0) {\r\n                    paginator.pagedItems[Math.floor(i / paginator.itemsPerPage)] = [paginator.filteredItems[i]];\r\n                } else {\r\n                    paginator.pagedItems[Math.floor(i / paginator.itemsPerPage)].push(paginator.filteredItems[i]);\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n        // show items per page\r\n        paginator.perPage = function () {\r\n            paginator.groupToPages();\r\n        };\r\n\r\n        paginator.range = function (start, end) {\r\n            var ret = [];\r\n            if (!end) {\r\n                end = start;\r\n                start = 0;\r\n            }\r\n            for (var i = start; i < end; i++) {\r\n                ret.push(i);\r\n            }\r\n            return ret;\r\n        };\r\n\r\n\r\n        return paginator;\r\n    });\r\n\r\n\r\n})();"]}